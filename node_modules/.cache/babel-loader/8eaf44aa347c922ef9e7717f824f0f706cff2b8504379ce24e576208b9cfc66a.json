{"ast":null,"code":"var _jsxFileName = \"/home/dandy02/my-app/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [toDo, setToDo] = useState('');\n  const [toDos, setToDos] = useState([]);\n  const onChange = event => setToDo(event.target.value);\n  // console.log(toDo)\n  const onSubmit = event => {\n    event.preventDefault(); //sbmit이 기본적으로 새로고침 기능이 있어서 없애주는것\n    if (toDo === '') {\n      //input값이 빈값이면 리턴\n      return;\n    }\n    setToDos(currentArray => [toDo, ...currentArray]); //...기존에 있는 배열에 추가 하는거 ... setToDos함수에 toDo(입력된 값)을 배열에 넣고 toDos(값)에 넣어준다\n    // setToDos([...toDos, toDo]) //결국 위에 currentArray가 toDo이니 이렇게 써도 됨 food Array에 '5'라는 요소를 추가하고 싶음. // const food = [1,2,3,4] // [5, food] // 이런 식으로 요소를 추가한다면 아래와 같은 결과. // -> [5, food[]]// Array 안에 또 다른 Array가 중첩되는 결과.// 그래서 아래와 같이 추가하면 됨. // ★[5, ...food]// 앞에 [ ... ]을 추가하면 Array의 element 들을 돌려주게 됨.\n    setToDo(''); //서브밋을 하고 input을 빈값으로 만들기\n  };\n  // console.log(toDos)\n  // console.log(toDos.map((item, index) => <li key={index}>{item}</li>)) // react ellement처럼 확인해볼수있다\n\n  const onClick = event => {\n    console.log(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"My To Dos(\", toDos.length, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: onChange,\n        value: toDo,\n        type: \"text\",\n        placeholder: \"Write your To do .....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add To Do\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: toDos.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [item, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClick,\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n// map() 함수\n// -> 배열을 가지고 있을 때 각각의 element들을 바꿀 수 있게 해줌map() 은 ()에 함수를 넣을 수 있는데 배열의 모든 item에 대해 실행됨\n// 즉 배열에 6개의 item이 있다면 6번 함수가 실행됨\n// 그리고 그 함수로부터 내가 return한 값은 새로운 배열에 들어가게 함\n// [‘a’, ‘b’, ‘c’, ‘d’, ‘e’, ‘f’].map(() => “:)”)\n// -> [‘:)’, ‘:)’, ‘:)’, ‘:)’, ‘:)’ ‘:)’] 인 새 배열을 만들어줌\n// 다만 기존의 배열에 접근할 수 없게됨\n// 그러나 map은 함수의 첫 번째 argument로 현재의 item을 가지고 올 수 있음\n// map(item) -> item이나 원하는 어떤 변수명을 넣으면 item자체를 리턴하는 것도 가능\n// map((item) => item.toUpperCase())\n// 로 하면 item이 대문자로 바뀐 새로운 배열은 만들어줌\n\n// 리액트는 기본적으로 list에 있는 모든 item을 인식하기 때문에 key를 넣어 고유하게 만들어줘야함\n// map의 첫 번째 argument는 값이고 두번째는 index 즉 숫자를 의미함\n// 그래서\n// {toDos.map((item, index) => {item})}\n// 만들어줌\n// 즉,\n// {{item},{item},{item}...}\n// 배열을 만들어 각자 고유의 key를 가지게 함\n_s(App, \"OyDu4awCMVygIRoqqc+8ZcvKmro=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","App","_s","toDo","setToDo","toDos","setToDos","onChange","event","target","value","onSubmit","preventDefault","currentArray","onClick","console","log","children","length","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","map","item","index","_c","$RefreshReg$"],"sources":["/home/dandy02/my-app/src/App.js"],"sourcesContent":["import { useState } from 'react'\n\nfunction App() {\n  const [toDo, setToDo] = useState('')\n  const [toDos, setToDos] = useState([])\n  const onChange = (event) => setToDo(event.target.value)\n  // console.log(toDo)\n  const onSubmit = (event) => {\n    event.preventDefault() //sbmit이 기본적으로 새로고침 기능이 있어서 없애주는것\n    if (toDo === '') {\n      //input값이 빈값이면 리턴\n      return\n    }\n    setToDos((currentArray) => [toDo, ...currentArray]) //...기존에 있는 배열에 추가 하는거 ... setToDos함수에 toDo(입력된 값)을 배열에 넣고 toDos(값)에 넣어준다\n    // setToDos([...toDos, toDo]) //결국 위에 currentArray가 toDo이니 이렇게 써도 됨 food Array에 '5'라는 요소를 추가하고 싶음. // const food = [1,2,3,4] // [5, food] // 이런 식으로 요소를 추가한다면 아래와 같은 결과. // -> [5, food[]]// Array 안에 또 다른 Array가 중첩되는 결과.// 그래서 아래와 같이 추가하면 됨. // ★[5, ...food]// 앞에 [ ... ]을 추가하면 Array의 element 들을 돌려주게 됨.\n    setToDo('') //서브밋을 하고 input을 빈값으로 만들기\n  }\n  // console.log(toDos)\n  // console.log(toDos.map((item, index) => <li key={index}>{item}</li>)) // react ellement처럼 확인해볼수있다\n\n  const onClick = (event) => {\n    console.log(event.target.value)\n  }\n\n  return (\n    <div>\n      <h1>My To Dos({toDos.length})</h1>\n      <form onSubmit={onSubmit}>\n        {/* form은 기본적으로 submit의 속성을 가지고 있다 */}\n        <input\n          onChange={onChange}\n          value={toDo}\n          type=\"text\"\n          placeholder=\"Write your To do .....\"\n        />\n        {/* 폼을 쓰는 이유 form 안에 버튼을 넣으면 onClick을 사용하지 않아도 엔터/마우스 클릭시 똑같은 기능/효과를 사용할 수 있고, 인풋의 경우도 form이 제공하는 자체 validation(아무것도 입력하지 않으면 알려줌 등) 기능도 사용할 수 있는 이점 */}\n        <button>Add To Do</button>\n      </form>\n      <ul>\n        {toDos.map((item, index) => (\n          <li key={index}>\n            {item}\n            <button onClick={onClick}>X</button>\n          </li>\n        ))}\n        {/* 밑에 적음 참고 map */}\n      </ul>\n    </div>\n  )\n}\n// map() 함수\n// -> 배열을 가지고 있을 때 각각의 element들을 바꿀 수 있게 해줌map() 은 ()에 함수를 넣을 수 있는데 배열의 모든 item에 대해 실행됨\n// 즉 배열에 6개의 item이 있다면 6번 함수가 실행됨\n// 그리고 그 함수로부터 내가 return한 값은 새로운 배열에 들어가게 함\n// [‘a’, ‘b’, ‘c’, ‘d’, ‘e’, ‘f’].map(() => “:)”)\n// -> [‘:)’, ‘:)’, ‘:)’, ‘:)’, ‘:)’ ‘:)’] 인 새 배열을 만들어줌\n// 다만 기존의 배열에 접근할 수 없게됨\n// 그러나 map은 함수의 첫 번째 argument로 현재의 item을 가지고 올 수 있음\n// map(item) -> item이나 원하는 어떤 변수명을 넣으면 item자체를 리턴하는 것도 가능\n// map((item) => item.toUpperCase())\n// 로 하면 item이 대문자로 바뀐 새로운 배열은 만들어줌\n\n// 리액트는 기본적으로 list에 있는 모든 item을 인식하기 때문에 key를 넣어 고유하게 만들어줘야함\n// map의 첫 번째 argument는 값이고 두번째는 index 즉 숫자를 의미함\n// 그래서\n// {toDos.map((item, index) => {item})}\n// 만들어줌\n// 즉,\n// {{item},{item},{item}...}\n// 배열을 만들어 각자 고유의 key를 가지게 함\n\nexport default App\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMS,QAAQ,GAAIC,KAAK,IAAKJ,OAAO,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACvD;EACA,MAAMC,QAAQ,GAAIH,KAAK,IAAK;IAC1BA,KAAK,CAACI,cAAc,CAAC,CAAC,EAAC;IACvB,IAAIT,IAAI,KAAK,EAAE,EAAE;MACf;MACA;IACF;IACAG,QAAQ,CAAEO,YAAY,IAAK,CAACV,IAAI,EAAE,GAAGU,YAAY,CAAC,CAAC,EAAC;IACpD;IACAT,OAAO,CAAC,EAAE,CAAC,EAAC;EACd,CAAC;EACD;EACA;;EAEA,MAAMU,OAAO,GAAIN,KAAK,IAAK;IACzBO,OAAO,CAACC,GAAG,CAACR,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACjC,CAAC;EAED,oBACEV,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAAiB,QAAA,GAAI,YAAU,EAACZ,KAAK,CAACa,MAAM,EAAC,GAAC;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClCtB,OAAA;MAAMW,QAAQ,EAAEA,QAAS;MAAAM,QAAA,gBAEvBjB,OAAA;QACEO,QAAQ,EAAEA,QAAS;QACnBG,KAAK,EAAEP,IAAK;QACZoB,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC;MAAwB;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC,eAEFtB,OAAA;QAAAiB,QAAA,EAAQ;MAAS;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CAAC,eACPtB,OAAA;MAAAiB,QAAA,EACGZ,KAAK,CAACoB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACrB3B,OAAA;QAAAiB,QAAA,GACGS,IAAI,eACL1B,OAAA;UAAQc,OAAO,EAAEA,OAAQ;UAAAG,QAAA,EAAC;QAAC;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GAF7BK,KAAK;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAApB,EAAA,CAnESD,GAAG;AAAA2B,EAAA,GAAH3B,GAAG;AAqEZ,eAAeA,GAAG;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}