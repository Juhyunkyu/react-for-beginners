{"ast":null,"code":"var _jsxFileName = \"/home/dandy02/my-app/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [loading, setLoading] = useState(true); // 로딩을 뿌려주고 다되면 없어지는거\n  const [movies, setMovies] = useState([]);\n  const key = 'cdb0b382a2f5f9abc0bc12e7bb17ca9e'; // 발급받은 키\n  const targetDt = '20231114'; // 조회하고자 하는 날짜를 'yyyymmdd' 형식으로 입력 오늘 날짜로 적어서 헤맴 어제 날짜전 적어줘야 나옴\n  const url = `http://www.kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json?key=${key}&targetDt=${targetDt}`;\n  //백틱을 주는 경우 >문자열 안에 변수를 넣어야 하는 경우 ''${variable}을(를) 수행할 수 있도록 사용합니다\n  //한국에서 제공해주는 무료 api  https://www.kobis.or.kr/kobisopenapi/homepg/apiservice/searchServiceInfo.do\n  const getMovies = async () => {\n    const json = await (await fetch(url)).json();\n    setMovies(json.boxOfficeResult.dailyBoxOfficeList);\n    setLoading(false);\n  }; // const response = await fetch(url); const json = await response.json(); setMovies(json......); setLoading(false) 랑같음\n  useEffect(() => {\n    getMovies();\n  }, []);\n\n  //위에 내용과 같다\n  // useEffect(() => {\n  //   fetch(url)\n  //     .then((response) => response.json())\n  //     .then((json) => {\n  //       setMovies(json)\n  //       setLoading(false)\n  //     })\n  //     .catch((error) => {\n  //       console.error(error)\n  //       setLoading(false)\n  //     })\n  // }, [])\n  console.log(movies); // 참고해서 boxOfficeResult.dailyBoxOfficeList 이렇게 데이터를 찾을수있다\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" \\uC601\\uD654 \\uBC15\\uC2A4 \\uC624\\uD53C\\uC2A4\", boxofficeType, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this), movies.map((movie //map를 쓸땐 key값을 줘야한다\n      ) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: movie.movieNm\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 15\n        }, this)]\n      }, movie.movieCd, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1CKmgsbuFjewbGnYkjmhEBs6qQ4=\");\n_c = App;\nexport default App;\n\n//키발급 cdb0b382a2f5f9abc0bc12e7bb17ca9e\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","App","_s","loading","setLoading","movies","setMovies","key","targetDt","url","getMovies","json","fetch","boxOfficeResult","dailyBoxOfficeList","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","boxofficeType","map","movie","movieNm","movieCd","_c","$RefreshReg$"],"sources":["/home/dandy02/my-app/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react'\n\nfunction App() {\n  const [loading, setLoading] = useState(true) // 로딩을 뿌려주고 다되면 없어지는거\n  const [movies, setMovies] = useState([])\n  const key = 'cdb0b382a2f5f9abc0bc12e7bb17ca9e' // 발급받은 키\n  const targetDt = '20231114' // 조회하고자 하는 날짜를 'yyyymmdd' 형식으로 입력 오늘 날짜로 적어서 헤맴 어제 날짜전 적어줘야 나옴\n  const url = `http://www.kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json?key=${key}&targetDt=${targetDt}`\n  //백틱을 주는 경우 >문자열 안에 변수를 넣어야 하는 경우 ''${variable}을(를) 수행할 수 있도록 사용합니다\n  //한국에서 제공해주는 무료 api  https://www.kobis.or.kr/kobisopenapi/homepg/apiservice/searchServiceInfo.do\n  const getMovies = async () => {\n    const json = await (await fetch(url)).json()\n    setMovies(json.boxOfficeResult.dailyBoxOfficeList)\n    setLoading(false)\n  } // const response = await fetch(url); const json = await response.json(); setMovies(json......); setLoading(false) 랑같음\n  useEffect(() => {\n    getMovies()\n  }, [])\n\n  //위에 내용과 같다\n  // useEffect(() => {\n  //   fetch(url)\n  //     .then((response) => response.json())\n  //     .then((json) => {\n  //       setMovies(json)\n  //       setLoading(false)\n  //     })\n  //     .catch((error) => {\n  //       console.error(error)\n  //       setLoading(false)\n  //     })\n  // }, [])\n  console.log(movies) // 참고해서 boxOfficeResult.dailyBoxOfficeList 이렇게 데이터를 찾을수있다\n  return (\n    <div>\n      {loading ? (\n        <h1>Loading....</h1>\n      ) : (\n        <div>\n          <h1> 영화 박스 오피스{boxofficeType} </h1>\n          {movies.map((\n            movie, //map를 쓸땐 key값을 줘야한다\n          ) => (\n            <div key={movie.movieCd}>\n              <h2>{movie.movieNm}</h2>\n              <ul>\n                <li></li>\n              </ul>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  )\n}\nexport default App\n\n//키발급 cdb0b382a2f5f9abc0bc12e7bb17ca9e\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC,EAAC;EAC7C,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAMS,GAAG,GAAG,kCAAkC,EAAC;EAC/C,MAAMC,QAAQ,GAAG,UAAU,EAAC;EAC5B,MAAMC,GAAG,GAAI,mGAAkGF,GAAI,aAAYC,QAAS,EAAC;EACzI;EACA;EACA,MAAME,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,MAAMC,IAAI,GAAG,MAAM,CAAC,MAAMC,KAAK,CAACH,GAAG,CAAC,EAAEE,IAAI,CAAC,CAAC;IAC5CL,SAAS,CAACK,IAAI,CAACE,eAAe,CAACC,kBAAkB,CAAC;IAClDV,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAC;EACFP,SAAS,CAAC,MAAM;IACda,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAK,OAAO,CAACC,GAAG,CAACX,MAAM,CAAC,EAAC;EACpB,oBACEL,OAAA;IAAAiB,QAAA,EACGd,OAAO,gBACNH,OAAA;MAAAiB,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,gBAEpBrB,OAAA;MAAAiB,QAAA,gBACEjB,OAAA;QAAAiB,QAAA,GAAI,+CAAU,EAACK,aAAa,EAAC,GAAC;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAClChB,MAAM,CAACkB,GAAG,CAAC,CACVC,KAAK,CAAE;MAAA,kBAEPxB,OAAA;QAAAiB,QAAA,gBACEjB,OAAA;UAAAiB,QAAA,EAAKO,KAAK,CAACC;QAAO;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACxBrB,OAAA;UAAAiB,QAAA,eACEjB,OAAA;YAAAkB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACP,CAAC;MAAA,GAJGG,KAAK,CAACE,OAAO;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKlB,CACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACnB,EAAA,CApDQD,GAAG;AAAA0B,EAAA,GAAH1B,GAAG;AAqDZ,eAAeA,GAAG;;AAElB;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}