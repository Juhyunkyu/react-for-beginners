{"ast":null,"code":"var _jsxFileName = \"/home/dandy02/my-app/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [toDo, setToDo] = useState('');\n  const [toDos, setToDos] = useState([]);\n  const onChange = event => setToDo(event.target.value);\n  // console.log(toDo)\n  const onSubmit = event => {\n    event.preventDefault(); //sbmit이 기본적으로 새로고침 기능이 있어서 없애주는것\n    if (toDo === '') {\n      //input값이 빈값이면 리턴\n      return;\n    }\n    // setToDos((currentArray) => [toDo, ...currentArray]) //기존에 있는 배열에 추가 하는거 ...\n    setToDos(...toDos, toDo);\n    //food Array에 '5'라는 요소를 추가하고 싶음.\n    // const food = [1,2,3,4]\n    // [5, food] // 이런 식으로 요소를 추가한다면 아래와 같은 결과.\n    // -> [5, food[]]\n    // Array 안에 또 다른 Array가 중첩되는 결과.\n\n    // 그래서 아래와 같이 추가하면 됨.\n    // ★[5, ...food]\n    // 앞에 [ ... ]을 추가하면 Array의 element 들을 돌려주게 됨.\n    setToDo(''); //서브밋을 하고 input을 빈값으로 만들기\n  };\n  // console.log(toDos)\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"My To Dos(\", toDos.length, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: onChange,\n        value: toDo,\n        type: \"text\",\n        placeholder: \"Write your To do .....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add To Do\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OyDu4awCMVygIRoqqc+8ZcvKmro=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","App","_s","toDo","setToDo","toDos","setToDos","onChange","event","target","value","onSubmit","preventDefault","children","length","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","_c","$RefreshReg$"],"sources":["/home/dandy02/my-app/src/App.js"],"sourcesContent":["import { useState } from 'react'\n\nfunction App() {\n  const [toDo, setToDo] = useState('')\n  const [toDos, setToDos] = useState([])\n  const onChange = (event) => setToDo(event.target.value)\n  // console.log(toDo)\n  const onSubmit = (event) => {\n    event.preventDefault() //sbmit이 기본적으로 새로고침 기능이 있어서 없애주는것\n    if (toDo === '') {\n      //input값이 빈값이면 리턴\n      return\n    }\n    // setToDos((currentArray) => [toDo, ...currentArray]) //기존에 있는 배열에 추가 하는거 ...\n    setToDos(...toDos, toDo)\n    //food Array에 '5'라는 요소를 추가하고 싶음.\n    // const food = [1,2,3,4]\n    // [5, food] // 이런 식으로 요소를 추가한다면 아래와 같은 결과.\n    // -> [5, food[]]\n    // Array 안에 또 다른 Array가 중첩되는 결과.\n\n    // 그래서 아래와 같이 추가하면 됨.\n    // ★[5, ...food]\n    // 앞에 [ ... ]을 추가하면 Array의 element 들을 돌려주게 됨.\n    setToDo('') //서브밋을 하고 input을 빈값으로 만들기\n  }\n  // console.log(toDos)\n  return (\n    <div>\n      <h1>My To Dos({toDos.length})</h1>\n      <form onSubmit={onSubmit}>\n        {/* form은 기본적으로 submit의 속성을 가지고 있다 */}\n        <input\n          onChange={onChange}\n          value={toDo}\n          type=\"text\"\n          placeholder=\"Write your To do .....\"\n        />\n        {/* 폼을 쓰는 이유 form 안에 버튼을 넣으면 onClick을 사용하지 않아도 엔터/마우스 클릭시 똑같은 기능/효과를 사용할 수 있고, 인풋의 경우도 form이 제공하는 자체 validation(아무것도 입력하지 않으면 알려줌 등) 기능도 사용할 수 있는 이점 */}\n        <button>Add To Do</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMS,QAAQ,GAAIC,KAAK,IAAKJ,OAAO,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACvD;EACA,MAAMC,QAAQ,GAAIH,KAAK,IAAK;IAC1BA,KAAK,CAACI,cAAc,CAAC,CAAC,EAAC;IACvB,IAAIT,IAAI,KAAK,EAAE,EAAE;MACf;MACA;IACF;IACA;IACAG,QAAQ,CAAC,GAAGD,KAAK,EAAEF,IAAI,CAAC;IACxB;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACAC,OAAO,CAAC,EAAE,CAAC,EAAC;EACd,CAAC;EACD;EACA,oBACEJ,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,GAAI,YAAU,EAACR,KAAK,CAACS,MAAM,EAAC,GAAC;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClClB,OAAA;MAAMW,QAAQ,EAAEA,QAAS;MAAAE,QAAA,gBAEvBb,OAAA;QACEO,QAAQ,EAAEA,QAAS;QACnBG,KAAK,EAAEP,IAAK;QACZgB,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC;MAAwB;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC,eAEFlB,OAAA;QAAAa,QAAA,EAAQ;MAAS;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAAChB,EAAA,CAzCQD,GAAG;AAAAoB,EAAA,GAAHpB,GAAG;AA2CZ,eAAeA,GAAG;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}